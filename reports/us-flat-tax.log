Traceback (most recent call last):
  File "/usr/share/miniconda/envs/blog/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/blog/lib/python3.8/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/envs/blog/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/envs/blog/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/envs/blog/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/envs/blog/lib/python3.8/site-packages/nbclient/client.py", line 540, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/blog/lib/python3.8/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/share/miniconda/envs/blog/lib/python3.8/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Get data.

from pandas_datareader import wb

pop = wb.download(indicator="SP.POP.TOTL",
                  country='all', start=2014, 
                  end=2014).reset_index().drop('year', axis=1)
pop.rename({"SP.POP.TOTL": "population"}, axis=1, inplace=True)
# Align countries with Our World In Data and current convention.
pop.country.replace({"Czech Republic": "Czech Rep.",
                     "Slovak Republic": "Slovakia",
                     "Korea, Rep.": "South Korea"},
                     inplace=True)
pop["log_pop"] = np.log(pop.population)

oecd_raw = pd.read_csv("data/oecd_growing_unequal_2008_table_4_6.csv")
# Align countries with Our World In Data and current convention.
oecd_raw.country.replace({"Korea": "South Korea",
                          "Slovak Rep.": "Slovakia"},
                         inplace=True)
owid = pd.read_csv("data/inequality_pre_post_redistribution.csv")
owid["gini_diff"] = owid.gini_market - owid.gini_disposable
oecd = oecd_raw.merge(owid, on="country").merge(pop, on="country")
oecd["log_pop_scaled"] = oecd.log_pop - oecd.log_pop.min() + 1  # For sizing
oecd["sqrt_pop"] = np.sqrt(oecd.population)

LABELS = {"gini_diff":
          "Gini reduction via taxes and transfers",
          "household_taxes_concentration":
          "Household tax concentration index",
          "public_cash_transfers_income_share":
          "Cash transfer share of household income",
          "population":
          "Population",
          "household_taxes_income_share":
          "Tax share of household income"
         }

# Make plot.
def ineq_scatter(x, xtitle, title, logo_x=1):
    fig = px.scatter(oecd, x=x, y="gini_diff", hover_name="country",
                     size="sqrt_pop", #trendline="ols",
                     labels=LABELS,
                     size_max=30)
    # Remove sqrt_pop from hover template.
    hovertemplate = ("<b>%{hovertext}</b><br><br>" +
                     LABELS[x] + "=%{x}<br>"
                     "Gini reduction via taxes and transfers=%{y}")
    fig.update_traces(hovertemplate=hovertemplate)
    fig.update_layout(
        title_text=title,
        title_font_size=20,
        font_family="Roboto",
    )

    fig.update_xaxes(
        tickangle=0,
        title_text=xtitle,
        tickfont={"size": 14},
        title_standoff=25,
        ticksuffix="",
        tickprefix="",
    )

    fig.update_yaxes(
        title_text="Difference between market and disposable income Gini index",
        ticksuffix="",
        tickfont={"size": 14},
        title_standoff=25,
    )
    if x == "public_cash_transfers_income_share":
        fig.update_xaxes(ticksuffix="%")

    fig.update_xaxes(title_font=dict(size=16, color="black"))
    fig.update_yaxes(title_font=dict(size=16, color="black"))

    add_ubi_center_watermark(fig, x=logo_x, y=-0.17)

    fig.update_layout(plot_bgcolor="white")

    fig.show(config=CONFIG)
    
ineq_scatter(x="household_taxes_concentration",
             xtitle="Household tax concentration index",
             title="Tax progressivity and inequality reduction in the OECD")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-4-3b288e6fe923>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;31m# Get data.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mpandas_datareader[0m [0;32mimport[0m [0mwb[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m pop = wb.download(indicator="SP.POP.TOTL",

[0;31mModuleNotFoundError[0m: No module named 'pandas_datareader'
ModuleNotFoundError: No module named 'pandas_datareader'

